Index: zstd-sys/zstd.h
===================================================================
--- zstd-sys.orig/zstd.h
+++ zstd-sys/zstd.h
@@ -1,21 +1,3 @@
-#ifdef PKG_CONFIG
-
 /* Just use installed headers */
 #include <zstd.h>
 #include <zdict.h>
-// Don't use experimental features like zstdmt
-
-#else // #ifdef PKG_CONFIG
-
-#include "zstd/lib/zstd.h"
-#include "zstd/lib/dictBuilder/zdict.h"
-#ifdef ZSTD_STATIC_LINKING_ONLY
-#include "zstd/lib/compress/zstdmt_compress.h"
-#endif // #ifdef ZSTD_STATIC_LINKING_ONLY
-
-#endif // #ifdef PKG_CONFIG
-
-
-/* This file is used to generate bindings for both headers.
- * Check update_bindings.sh to see how to use it.
- * Or use the `bindgen` feature, which will create the bindings automatically. */
Index: zstd-sys/Cargo.toml
===================================================================
--- zstd-sys.orig/Cargo.toml
+++ zstd-sys/Cargo.toml
@@ -31,21 +31,12 @@ doctest = false
 version = "0.2.45"
 [build-dependencies.bindgen]
 version = "0.56"
-optional = true
-
-[build-dependencies.cc]
-version = "1.0.45"
-features = ["parallel"]
-
-[build-dependencies.glob]
-version = "0.3"
 
 [build-dependencies.itertools]
 version = "0.9"
 
 [build-dependencies.pkg-config]
 version = "0.3"
-optional = true
 
 [features]
 default = ["legacy"]
Index: zstd-sys/build.rs
===================================================================
--- zstd-sys.orig/build.rs
+++ zstd-sys/build.rs
@@ -4,8 +4,6 @@ extern crate bindgen;
 #[cfg(feature = "pkg-config")]
 extern crate pkg_config;
 
-extern crate cc;
-extern crate glob;
 extern crate itertools;
 
 use std::path::PathBuf;
@@ -13,7 +11,6 @@ use std::{env, fs};
 
 use itertools::Itertools;
 
-#[cfg(feature = "bindgen")]
 fn generate_bindings(defs: Vec<&str>, headerpaths: Vec<PathBuf>) {
     let bindings = bindgen::Builder::default()
         .header("zstd.h")
@@ -44,10 +41,6 @@ fn generate_bindings(defs: Vec<&str>, he
         .expect("Could not write bindings");
 }
 
-#[cfg(not(feature = "bindgen"))]
-fn generate_bindings(_: Vec<&str>, _: Vec<PathBuf>) {}
-
-#[cfg(feature = "pkg-config")]
 fn pkg_config() -> (Vec<&'static str>, Vec<PathBuf>) {
     let library = pkg_config::Config::new()
         .statik(true)
@@ -57,95 +50,6 @@ fn pkg_config() -> (Vec<&'static str>, V
     (vec!["PKG_CONFIG"], library.include_paths)
 }
 
-#[cfg(not(feature = "pkg-config"))]
-fn pkg_config() -> (Vec<&'static str>, Vec<PathBuf>) {
-    unimplemented!()
-}
-
-#[cfg(not(feature = "legacy"))]
-fn set_legacy(_config: &mut cc::Build) {}
-
-#[cfg(feature = "legacy")]
-fn set_legacy(config: &mut cc::Build) {
-    config.define("ZSTD_LEGACY_SUPPORT", Some("1"));
-}
-
-#[cfg(feature = "zstdmt")]
-fn set_pthread(config: &mut cc::Build) {
-    config.flag("-pthread");
-}
-
-#[cfg(not(feature = "zstdmt"))]
-fn set_pthread(_config: &mut cc::Build) {}
-
-#[cfg(feature = "zstdmt")]
-fn enable_threading(config: &mut cc::Build) {
-    config.define("ZSTD_MULTITHREAD", Some(""));
-}
-
-#[cfg(not(feature = "zstdmt"))]
-fn enable_threading(_config: &mut cc::Build) {}
-
-fn compile_zstd() {
-    let mut config = cc::Build::new();
-
-    let globs = &[
-        "zstd/lib/common/*.c",
-        "zstd/lib/compress/*.c",
-        "zstd/lib/decompress/*.c",
-        "zstd/lib/legacy/*.c",
-        "zstd/lib/dictBuilder/*.c",
-    ];
-
-    for pattern in globs {
-        for path in glob::glob(pattern).unwrap() {
-            let path = path.unwrap();
-            config.file(path);
-        }
-    }
-
-    // Some extra parameters
-    config.opt_level(3);
-    config.include("zstd/lib/");
-    config.include("zstd/lib/common");
-    config.include("zstd/lib/legacy");
-    config.warnings(false);
-
-    config.define("ZSTD_LIB_DEPRECATED", Some("0"));
-
-    // Hide symbols from resulting library,
-    // so we can be used with another zstd-linking lib.
-    // See https://github.com/gyscos/zstd-rs/issues/58
-    config.flag("-fvisibility=hidden");
-    config.define("ZSTDLIB_VISIBILITY", Some(""));
-    config.define("ZDICTLIB_VISIBILITY", Some(""));
-    config.define("ZSTDERRORLIB_VISIBILITY", Some(""));
-
-    set_pthread(&mut config);
-    set_legacy(&mut config);
-    enable_threading(&mut config);
-
-    // Compile!
-    config.compile("libzstd.a");
-
-    let src = env::current_dir().unwrap().join("zstd").join("lib");
-    let dst = PathBuf::from(env::var_os("OUT_DIR").unwrap());
-    let include = dst.join("include");
-    fs::create_dir_all(&include).unwrap();
-    fs::copy(src.join("zstd.h"), include.join("zstd.h")).unwrap();
-    fs::copy(
-        src.join("common").join("zstd_errors.h"),
-        include.join("zstd_errors.h"),
-    )
-    .unwrap();
-    fs::copy(
-        src.join("dictBuilder").join("zdict.h"),
-        include.join("zdict.h"),
-    )
-    .unwrap();
-    println!("cargo:root={}", dst.display());
-}
-
 fn main() {
     let target_arch = std::env::var("CARGO_CFG_TARGET_ARCH").unwrap_or_default();
     let target_os = std::env::var("CARGO_CFG_TARGET_OS").unwrap_or_default();
@@ -155,22 +59,7 @@ fn main() {
     }
 
     // println!("cargo:rustc-link-lib=zstd");
-    let (defs, headerpaths) = if cfg!(feature = "pkg-config") {
-        pkg_config()
-    } else {
-        if !PathBuf::from("zstd/lib").exists() {
-            panic!("Folder 'zstd/lib' does not exists. Maybe you forget clone 'zstd' submodule?");
-        }
-
-        let manifest_dir = PathBuf::from(
-            env::var("CARGO_MANIFEST_DIR")
-                .expect("Manifest dir is always set by cargo"),
-        );
-
-        compile_zstd();
-        (vec![], vec![manifest_dir.join("zstd/lib")])
-    };
-
+    let (defs, headerpaths) = pkg_config();
     println!("cargo:include={}", headerpaths.iter().map(|p| p.display().to_string()).join(";"));
 
     generate_bindings(defs, headerpaths);
Index: zstd-sys/src/lib.rs
===================================================================
--- zstd-sys.orig/src/lib.rs
+++ zstd-sys/src/lib.rs
@@ -12,37 +12,4 @@ extern crate libc;
 extern crate std;
 
 // If running bindgen, we'll end up with the correct bindings anyway.
-#[cfg(feature = "bindgen")]
 include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
-
-// The bindings used depend on a few feature flags.
-
-// No-std (libc-based)
-#[cfg(all(
-    not(feature = "std"),
-    not(feature = "experimental"),
-    not(feature = "bindgen")
-))]
-include!("bindings.rs");
-
-#[cfg(all(
-    not(feature = "std"),
-    feature = "experimental",
-    not(feature = "bindgen")
-))]
-include!("bindings_experimental.rs");
-
-// Std-based (no libc)
-#[cfg(all(
-    feature = "std",
-    not(feature = "experimental"),
-    not(feature = "bindgen")
-))]
-include!("bindings_std.rs");
-
-#[cfg(all(
-    feature = "std",
-    feature = "experimental",
-    not(feature = "bindgen")
-))]
-include!("bindings_std_experimental.rs");
