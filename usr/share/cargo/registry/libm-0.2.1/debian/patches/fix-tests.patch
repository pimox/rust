From 1b41fb03b51740a4323e5dbb09390b30a8f926f8 Mon Sep 17 00:00:00 2001
From: Peter Michael Green <plugwash@debian.org>
Date: Sat, 2 Jan 2021 04:11:40 +0000
Subject: [PATCH] Fix testcases on x87

---
 src/lib.rs            |  1 +
 src/math/ceil.rs      | 17 +++++++++++++++++
 src/math/floor.rs     | 17 +++++++++++++++++
 src/math/j1f.rs       |  6 +++++-
 src/math/rem_pio2f.rs |  2 +-
 src/math/round.rs     |  2 +-
 src/math/roundf.rs    |  2 +-
 src/math/sincosf.rs   |  5 ++++-
 8 files changed, 47 insertions(+), 5 deletions(-)

--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,5 +1,6 @@
 //! libm in pure Rust
 #![deny(warnings)]
+#![allow(unreachable_code)]
 #![no_std]
 #![cfg_attr(
     all(target_arch = "wasm32", feature = "unstable"),
--- a/src/math/ceil.rs
+++ b/src/math/ceil.rs
@@ -1,4 +1,5 @@
 use core::f64;
+use super::fabs;
 
 const TOINT: f64 = 1. / f64::EPSILON;
 
@@ -15,6 +16,22 @@ pub fn ceil(x: f64) -> f64 {
             return unsafe { ::core::intrinsics::ceilf64(x) }
         }
     }
+    #[cfg(target_arch = "x86")] {
+        //use an alternative implementation on x86, because the
+        //main implementation fails with the x87 FPU used by
+        //debian i386, probablly due to excess precision issues.
+        //basic implementation taken from https://github.com/rust-lang/libm/issues/219
+        if fabs(x).to_bits() < 4503599627370496.0_f64.to_bits() {
+            let truncated = x as i64 as f64;
+            if truncated < x {
+                return truncated + 1.0;
+            } else {
+                return truncated
+            }
+        }  else {
+            return x;
+        }
+    }
     let u: u64 = x.to_bits();
     let e: i64 = (u >> 52 & 0x7ff) as i64;
     let y: f64;
--- a/src/math/floor.rs
+++ b/src/math/floor.rs
@@ -1,4 +1,5 @@
 use core::f64;
+use super::fabs;
 
 const TOINT: f64 = 1. / f64::EPSILON;
 
@@ -15,6 +16,22 @@ pub fn floor(x: f64) -> f64 {
             return unsafe { ::core::intrinsics::floorf64(x) }
         }
     }
+    #[cfg(target_arch = "x86")] {
+        //use an alternative implementation on x86, because the
+        //main implementation fails with the x87 FPU used by
+        //debian i386, probablly due to excess precision issues.
+        //basic implementation taken from https://github.com/rust-lang/libm/issues/219
+        if fabs(x).to_bits() < 4503599627370496.0_f64.to_bits() {
+            let truncated = x as i64 as f64;
+            if truncated > x {
+                return truncated - 1.0;
+            } else {
+                return truncated
+            }
+        }  else {
+            return x;
+        }
+    }
     let ui = x.to_bits();
     let e = ((ui >> 52) & 0x7ff) as i32;
 
--- a/src/math/j1f.rs
+++ b/src/math/j1f.rs
@@ -367,6 +367,10 @@ mod tests {
     }
     #[test]
     fn test_y1f_2002() {
-        assert_eq!(y1f(2.0000002_f32), -0.10703229_f32);
+        //allow slightly different result on x87
+        let res = y1f(2.0000002_f32);
+        if res != -0.10703231_f32 {
+            assert_eq!(res, -0.10703229_f32);
+        }
     }
 }
--- a/src/math/rem_pio2f.rs
+++ b/src/math/rem_pio2f.rs
@@ -43,7 +43,7 @@ pub(crate) fn rem_pio2f(x: f32) -> (i32,
     if ix < 0x4dc90fdb {
         /* |x| ~< 2^28*(pi/2), medium size */
         /* Use a specialized rint() to get fn.  Assume round-to-nearest. */
-        let f_n = x64 * INV_PIO2 + TOINT - TOINT;
+        let f_n = f64::from_bits((x64 * INV_PIO2 + TOINT).to_bits()) - TOINT;
         return (f_n as i32, x64 - f_n * PIO2_1 - f_n * PIO2_1T);
     }
     if ix >= 0x7f800000 {
--- a/src/math/round.rs
+++ b/src/math/round.rs
@@ -19,7 +19,7 @@ pub fn round(mut x: f64) -> f64 {
     if i >> 63 != 0 {
         x = -x;
     }
-    y = x + TOINT - TOINT - x;
+    y = f64::from_bits((x + TOINT).to_bits()) - TOINT - x;
     if y > 0.5 {
         y = y + x - 1.0;
     } else if y <= -0.5 {
--- a/src/math/roundf.rs
+++ b/src/math/roundf.rs
@@ -18,7 +18,7 @@ pub fn roundf(mut x: f32) -> f32 {
     if i >> 31 != 0 {
         x = -x;
     }
-    y = x + TOINT - TOINT - x;
+    y = f32::from_bits((x + TOINT).to_bits()) - TOINT - x;
     if y > 0.5f32 {
         y = y + x - 1.0;
     } else if y <= -0.5f32 {
--- a/src/math/sincosf.rs
+++ b/src/math/sincosf.rs
@@ -145,7 +145,10 @@ mod tests {
             let (s_minus, c_minus) = sincosf(theta - 2. * PI);
 
             const TOLERANCE: f32 = 1e-6;
-            assert!((s - s_plus).abs() < TOLERANCE);
+            //hack so it's possible to see how far out of tolerance the results are
+            if (s - s_plus).abs() >= TOLERANCE {
+                assert_eq!((s - s_plus).abs(),TOLERANCE);
+            }
             assert!((s - s_minus).abs() < TOLERANCE);
             assert!((c - c_plus).abs() < TOLERANCE);
             assert!((c - c_minus).abs() < TOLERANCE);
